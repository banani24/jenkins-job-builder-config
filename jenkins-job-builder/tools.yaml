#- job:
#    name: Tool-NVD-Update
#    project-type: matrix
#    description: "Create/update NVD dependency data on slave nodes"
#    # Add sidebars for: owasp doc, nvd
#    #   setup macro and call
#    # axes not working with raw
#    axes:
#      - 'elastic':
#          axis: node
#          label: etp
#          skip_offline: true
#    builders:
#      - 'dependency-check-updater':
#          data_dir: "../../NVD_data"

# TODO: Create jobs for other virtual environments
#   Eval plugins, but if not support as desired create jobs
#   node.js, ruby,
- job:
    # TODO:
    #   New args: global/local(workspace) venv location (figure out how), purge(t/f) remove venv first
    #   If python version changes for venv, rm and recreate
    name: Tool-Python
    project-type: freestyle
    description: Setup PyEnv, PyEnv-virtualenv, Python version, and virtual environment
    defaults: global
    node: $node
    parameters:
      - string:
          name: python_ver
          default: "2.7.11"
          description: "Python version to ensure is available"
      - string:
          name: venv
          default: test-env
          description: "Python virtual environment to ensure is available"
      - string:
          name: pkgs
          default: ""
          description: "Python packages to ensure are installed"
      - choice:
          name: pkgs_ver
          choices:
            - present
            - latest
          description: "Only ensure packages are installed or ensure they are the latest"
      - bool:
          name: rebuild
          default: false
          description: "Rebuild the virtual environment"
      - node:
          name: node
          description: "Node to run on"
          allowed-slaves:
          ignore-offline-nodes: true
          allow-multiselect: false

    properties:
      - 'custom-icon':
          custom-icon: tools.png
      - 'sidebar-python':
      - 'sidebar-pyenv':
    builders:
      - 'python-setup':
    wrappers:
      - 'build-timeout':
          timeout: 30
      - timestamps

- job:
    name: Tool-Python-Analysis
    project-type: freestyle
    description: Calls Tool-Python with right parameters to get Python Code Analysis environment setup
    defaults: global
    parameters:
      - string:
          name: python_ver
          default: "2.7.11"
          description: "Python version to ensure is available"
      - string:
          name: venv
          default: test-env
          description: "Python virtual environment to ensure is available"
    properties:
      - 'custom-icon':
          custom-icon: python-page.png
    builders:
      - trigger-builds:
        - project: "Tool-Python"
          block: true
          same-node: true
          predefined-parameters: |
            python_ver=$python_ver
            venv=$venv
            pkgs=hacking bandit tox flake8-junit-report flake8-deprecated flake8-coding flake8-builtins flake8-pep257 flake8-future-import flake8-import-order pep8-naming flake8-mock flake8-print flake8-blind-except flake8-commas flake8-putty flake8-regex pepper8
         # Plugins that would like, but have issues: flake8-exact-pin
      - shell: |
          set +x
          if [ -d "${JENKINS_HOME}" ]; then
            # or [ "${NODE_NAME}" = "master" ]
            home=${JENKINS_HOME}
          else
            home=${HOME}
          fi
          export PYENV_ROOT="${home}/.pyenv"
          export PATH="${PYENV_ROOT}/bin:${PATH}"

          ## Initialize PyEnv and virtualenv
          eval "$(pyenv init -)"
          eval "$(pyenv virtualenv-init -)"
          export PYENV_VIRTUALENV_DISABLE_PROMPT=1

          pyenv activate "${venv}"

          ## Validate
          echo "PyEnv Versions"
          pyenv versions
          echo "Current Versions:"
          pyenv version
          python --version
          pip --version
          echo "Virtual Envs:"
          pyenv virtualenvs
          echo 'Packages Installed:'
          pip freeze

- job:
    name: Tool-Python-Cleanup
    project-type: freestyle
    description: Remove PyEnv directory. Improve later to have options to remove specific items
    defaults: global
    # TODO: ? turn on concurent builds allowed
    parameters:
      - node:
          name: NODE
          description: "Select node to remove Python from"
          allow-multiselect: true
          ignore-offline-nodes: true
    properties:
      - 'custom-icon':
          custom-icon: tools.png
    builders:
      - 'python-cleanup':

- job:
    name: Tool-Python-Example
    project-type: freestyle
    description: Example of using a Python virtual environment
    defaults: global
    # TODO: make work on slaves
    node: master
    parameters:
      - string:
          name: python_ver
          default: "2.7.10"
          description: "Python version to ensure is available"
      - string:
          name: venv
          default: test-env
          description: "Python virtual environment to ensure is available"
    properties:
      - 'custom-icon':
          custom-icon: python-page.png
    builders:
      - trigger-builds:
        - project: "Tool-Python"
          block: true
          same-node: true
          # FIX: parameters need to be on seperate lines to work
          predefined-parameters: |
            python_ver=$python_ver
            venv=$venv
      - shell: |
          set +x
          if [ -d "${JENKINS_HOME}" ]; then
            # or [ "${NODE_NAME}" = "master" ]
            home=${JENKINS_HOME}
          else
            home=${HOME}
          fi
          export PYENV_ROOT="${home}/.pyenv"
          export PATH="${PYENV_ROOT}/bin:${PATH}"

          ## Initialize PyEnv and virtualenv
          eval "$(pyenv init -)"
          eval "$(pyenv virtualenv-init -)"
          export PYENV_VIRTUALENV_DISABLE_PROMPT=1

          pyenv activate "${venv}"

          ## Validate
          echo "PyEnv Versions"
          pyenv versions
          echo "Current Versions:"
          pyenv version
          python --version
          pip --version
          echo "Virtual Envs:"
          pyenv virtualenvs
