- job:
    name: Tool-Python
    project-type: freestyle
    description: Setup PyEnv, PyEnv-virtualenv, Python version, and virtual environment
    defaults: global
    parameters:
      - string:
          name: python_ver
          default: "2.7.11"
          description: "Python version to ensure is available"
      - string:
          name: venv
          default: test-env
          description: "Python virtual environment to ensure is available"
    properties:
      - 'custom-icon':
          custom-icon: jenkins.png
    builders:
      - 'python-setup':

- job:
    name: Tool-Python-Cleanup
    project-type: freestyle
    description: Remove PyEnv directory. Improve later to have options to remove specific items
    defaults: global
    parameters:
      - node:
          name: NODE
          description: "Select node to remove Python from"
          allow-multiselect: true
          ignore-offline-nodes: true
    properties:
      - 'custom-icon':
          custom-icon: jenkins.png
    builders:
      - 'python-cleanup':

- job:
    name: Tool-Python-Example
    project-type: freestyle
    description: Example of using a Python virtual environment
    defaults: global
    # TODO: make work on slaves
    node: master
    parameters:
      - string:
          name: python_ver
          default: "2.7.10"
          description: "Python version to ensure is available"
      - string:
          name: venv
          default: test-env
          description: "Python virtual environment to ensure is available"
    builders:
      - trigger-builds:
        - project: "Tool-Python"
          block: true
          same-node: true
          # FIX: parameters need to be on seperate lines to work
          predefined-parameters: |
            python_ver=$python_ver
            venv=$venv
      - shell: |
          set +x
          if [ -d "${JENKINS_HOME}" ]; then
            # or [ "${NODE_NAME}" = "master" ]
            home=${JENKINS_HOME}
          else
            home=${HOME}
          fi
          export PYENV_ROOT="${home}/.pyenv"
          export PATH="${PYENV_ROOT}/bin:${PATH}"
          
          ## Initialize PyEnv and virtualenv
          eval "$(pyenv init -)"
          eval "$(pyenv virtualenv-init -)"
          export PYENV_VIRTUALENV_DISABLE_PROMPT=1
          
          pyenv activate "${venv}"
          
          ## Validate
          echo "PyEnv Versions"
          pyenv versions
          echo "Current Versions:"
          pyenv version
          python --version
          pip --version
          echo "Virtual Envs:"
          pyenv virtualenvs

- job:
    name: Tool-PyEnv
    project-type: matrix
    description: Install PyEnv and PyEnv-virtualenv
    #execution-strategy:
    #  # this handles any groovy expression
    #  # Can use labels and axis variables
    #  combination-filter: |
    #    (os=="centos" && ! os=="master" )
    axes:
      - axis:
         type: label-expression
         name: node
         values:
          - CentOS && ! master
    #  - axis:
    #     type: slave
    #     name: label
    #     values:
    #      - CentOS
    #  - axis:
    #     type: user-defined
    #     name: python_version
    #     values:
    #       - 2.7.10
    #       - 3.5.0
    properties:
      - 'custom-icon':
          custom-icon: tools.png
    builders:
      - shell:
          !include-raw:
            - ./global//scripts/pyenv-plugins.sh
    wrapper:
      - pyenv:
          python_version: 2.7.10


